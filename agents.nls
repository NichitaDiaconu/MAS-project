;Routing table indexes:
;0 blue
;1 red
;2 green
;3 black
;4 "Evertsenstraat" 5
;5 "Museumplein" 13
;6 "Hendrikkade" 9

; Graph indexes
;0 "Amstel"
;1 "Amstelveenseweg" 
;2 "Buikslotermeer" 
;3 "Centraal" 
;4 "Dam"
;5 "Evertsenstraat" 
;6 "Floradorp" 
;7 "Haarlemmermeerstation" 
;8 "Hasseltweg" 
;9 "Hendrikkade"
;10 "Leidseplein" 
;11 "Lelylaan" 
;12 "Muiderpoort" 
;13 "Museumplein" 
;14 "RAI" 
;15 "SciencePark" 
;16 "Sloterdijk"
;17 "Surinameplein" 
;18 "UvA" 
;19 "VU" 
;20 "Waterlooplein" 
;21 "Weesperplein" 
;22 "Wibautstraat" 
;23 "Zuid"

; Implicit things nobody said:
; you add busses at a tick and they only appear at the next tick; moreover, id of the bus with add-bus is unknown...

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".

  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).
    
  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  bus_routes 
  central_to_route_routes 
  bus_stops_to_idx 
  bus_color
  initiated_buses_types
  initiated_buses_colors
  routing_table
]

globals [graph]

to determine_and_set_next_stop
  ;create a method that sets next_stop of any bus to the next stop on that buss line

  ask buses [
    if self = myself [
      ; in the bus that called this
      
      let idx 0
      show bus_color
      show bus_routes
      ifelse bus_routes != 0
      ; bus only initialized but not created
      [
      foreach item bus_color bus_routes [
        ; for each station in the route of this buss color 
        let prev_idx idx - 1
        if prev_idx = -1[
          set prev_idx length item bus_color bus_routes
          set prev_idx prev_idx - 1
        ]
        if ? = current_stop and ( idx = 0 or previous_stop = item prev_idx item bus_color bus_routes )[
          ; if we found the current station, set the next station
          ifelse idx + 1 = length item bus_color bus_routes [
            ; if we are at the last stop in the list
            set next_stop item 0 item bus_color bus_routes
          ]
          [
            let next_idx idx + 1
            set next_stop item next_idx item bus_color bus_routes
          ]
          ;endif
        ]
        set idx idx + 1
      ]
      if next_stop = -1 [
        ; if we did not find current_stop in the route of this buss line
        ; means we are not on our line yet and we should go there 1st by finding our route in central_to_route_routes
        set idx 0
        foreach item bus_color central_to_route_routes [
          ; for each station in the route from centrat to this colors route 
          if ? = current_stop [
            ; if we found the current station, set the next station
            ifelse idx + 1 = length item bus_color bus_routes [
              ; if we are at the last stop in the list
              show "ERROR we should be on this buss colour normal route"
            ]
            [
              let next_idx idx + 1
              let my_colors_route_to_route item bus_color central_to_route_routes
              set next_stop item next_idx my_colors_route_to_route
            ]
            ;endif
          ]
          set idx idx + 1
        ]
      ]
    ]
    [
      show "tried to set next stop of an uncreated bus"
    ]
   ;endif
    ]
    
  ]
end

; creating a bus takes:
;     - initiate-new-bus at tick i
;     - create-initiated-bus at tick i+1
to initiate-new-bus [ b_type b_color ] 
   ;show "initiating"
   ask buses [
     if self = myself [
         add-bus b_type
         set initiated_buses_types lput b_type initiated_buses_types
         set initiated_buses_colors lput b_color initiated_buses_colors
         ;show "initiated bus"
         ;show initiated_buses_types
     ]
   ]
end

to create-initiated-buses
  ask buses [
    while [ not empty? initiated_buses_types ] [
      let new_bus_id create-initiated-bus
    ]
  ]
end

to-report create-initiated-bus
  ; Creates 1 initiated bus
  ; returns -1 on fail 
  ; returns the id of the new bus on success
   let new_bus_type -1
   let new_bus_color -1
   ;show "creating"
   ask buses [
       if self = myself [
         ifelse  initiated_buses_types != 0
         ; called this NOT from a bus that has been initiated but not created
         [
         ;show initiated_buses_types
         ifelse empty? initiated_buses_types [
           ; show "ERROR there should be at least a bus type on the stack in order to create"
         ]
         [
           ; select the last bus type from queue and remove it from queue
           set new_bus_type last initiated_buses_types
           set initiated_buses_types but-last initiated_buses_types
           set new_bus_color last initiated_buses_colors
           set initiated_buses_colors but-last initiated_buses_colors
         ]
         ; endif
         ]
         [
           ;show "tried to create from an uncreated bus"
         ]
         ;endif
       ]
   ]
   
   let new_bus_id -1
   ifelse new_bus_type = -1 [
     ; if we did not find a bus return
     report -1
   ]
   [
     ; else create the specified bus
     ask buses[
       ; find a free bus and set it   
       if next_stop = -1[
         if current_stop = 3[
           if bus_type = new_bus_type [
             ; we found a bus type that has no next station and is seated at central station
             set bus_color new_bus_color
             set bus_routes [[3 4 5 10 13 22 21 20 9] [5 16 11 1 19 23 13 7 17] [22 13 23 14 0 15 18 15 12] [9 8 6 8 2 8]]
             set central_to_route_routes [[3 4] [3 4 5 16] [3 9 20 21 22 13] [3 9 8]]
             set bus_stops_to_idx ["Amstel" "Amstelveenseweg" "Buikslotermeer" "Centraal" "Dam"
               "Evertsenstraat" "Floradorp" "Haarlemmermeerstation" "Hasseltweg" "Hendrikkade"
               "Leidseplein" "Lelylaan" "Muiderpoort" "Museumplein" "RAI" "SciencePark" "Sloterdijk"
               "Surinameplein" "UvA" "VU" "Waterlooplein" "Weesperplein" "Wibautstraat" "Zuid"]
             set routing_table [["D" 5 13 9 "D" "D" "D"] [5 "D" 13 13 "D" "D" 13] [13 13 "D" 13 13 "D" 13] [9 9 9 "D" 9 9 "D"]]
             set initiated_buses_types []
             set initiated_buses_colors []
             set new_bus_id bus_id
             ;show "created bus"
           ]
         ]
       ]
     ]
   ]
   report new_bus_id
   ; endif
end

to init-buses 
  ; Initialize your agents here.
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  ask buses [
    if self = myself[
    set bus_color 0
    set bus_routes [[3 4 5 10 13 22 21 20 9] [5 16 11 1 19 24 13 7 17] [13 23 14 0 15 18 15 12 22] [9 8 6 2]]
    set central_to_route_routes [[3] [3 4 5] [3 9 20 21 22] [3 9]]
    set bus_stops_to_idx ["Amstel" "Amstelveenseweg" "Buikslotermeer" "Centraal" "Dam"
      "Evertsenstraat" "Floradorp" "Haarlemmermeerstation" "Hasseltweg" "Hendrikkade"
      "Leidseplein" "Lelylaan" "Muiderpoort" "Museumplein" "RAI" "SciencePark" "Sloterdijk"
      "Surinameplein" "UvA" "VU" "Waterlooplein" "Weesperplein" "Wibautstraat" "Zuid"]
    set routing_table [["D" 5 13 9 "D" "D" "D"] [5 "D" 13 13 "D" "D" 13] [13 13 "D" 13 13 "D" 13] [9 9 9 "D" 9 9 "D"]]
    set initiated_buses_types []
    set initiated_buses_colors []
    ]
  ]
  
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  ; The MAIN function called on LOOP at every tick
  
  ; Description ( too see how a new bus is creted there is documentation above initiate-new-bus method ):
  
  ; look at each bus and see whether it has any initiated busses that it needs to create
  ask buses [
    create-initiated-buses
  ]
  
  ; initiate these busses from bus 24 at tick 2
  if ticks = 2 [
    ask bus 24 [
      initiate-new-bus 2 1
      initiate-new-bus 3 2
      initiate-new-bus 1 3
    ]
  ]
  
  
  ; determine next stop of each bus and set it
  ask buses [
    if next_stop = -1
    [
      determine_and_set_next_stop
    ]
    travel-to next_stop
    
  ]
  
end
